#!/bin/bash

bin_dir="/opt/vidhop/bin"
# overwrites vars variables $vidhop_dir, $vidhop_app_dir and $bin_dir with values from config.ini.
# overwrites sync variables $IP_PHONE, $USER_PHONE, $USER_WS, $TERMUX_RC_WS.
config_ini="/opt/vidhop/config/config.ini"
[ -n "$1" ] && config_ini="$1"
[ -f "$config_ini" ] && . "$config_ini"

. "$bin_dir/vars"
. "$bin_dir/config"
. "$bin_dir/common"
. "$bin_dir/logger"
. "$bin_dir/history"
. "$bin_dir/fvid"
. "$bin_dir/files"
. "$bin_dir/metadata"

. "$bin_dir/dlv"
. "$bin_dir/batch"
. "$bin_dir/ffmpeg"
. "$bin_dir/image"
. "$bin_dir/sync"
. "$bin_dir/project"
. "$bin_dir/fix"
. "$bin_dir/debug"

switch-env-vidhop() {
  [ "$1" = -h ] || [ "$1" = --help ] &&
    echo "   Usage: switch-env-vidhop <PATH>" &&
    echo "            <PATH> is the path of the targeted VidHop directory e.g. /PATH/TO/FUN/VidHop" &&
    echo "          switch-env-vidhop" &&
    echo "            fetches <PATH> from 'vidhop_dir_alt' var in config.ini if it exists" &&
    echo "            fetches <PATH> from \$PWD (present working directory)" &&
    echo "    Info: Points the VidHop media directory to <PATH> to create a new environment." &&
    echo "          The default VidHop media directory will stay untouched." &&
    echo "scenario: You don't want to mix videos you download for work with those you download for fun." &&
    echo "          You can accomplish that by doing 'switch-env-vidhop /PATH/TO/FUN_DIR" && return
  unset vidhop_dir

  [ -n "$1" ] && vidhop_dir="$(realpath "$1")"
  [ -z "$1" ] && [ -n "$vidhop_dir_alt" ] && vidhop_dir="$vidhop_dir_alt"
  [ -z "$1" ] && vidhop_dir="$PWD/VidHop"

  mkdir -p "$vidhop_dir" 2>/dev/null
  cd "$vidhop_dir"
  . vidhop
}

install_loader() {
  loader_bin="/usr/local/bin/vidhop"
  loader_tmp="loader_tmp"
  echo "> Installing VidHop loader to $loader_bin..." && sleep 1
  cd "$HOME" # make sure we have write permissions
  echo '#!/bin/bash' >"$loader_tmp"
  echo >>"$loader_tmp"
  echo ". $bin_dir/loader" >>"$loader_tmp"
  sudo mv "$loader_tmp" "$loader_bin"
  sudo chmod +x "$loader_bin"
  . vidhop
}

installloader() { # alias for phone hand typing
  install_loader
}

fetch_github() {
  echo "> Updating VidHop code at $vidhop_app_dir..."
  echo "> Fetching from GitHub..." && sleep 1
  cd "$vidhop_app_dir"
  git fetch --all
  git reset --hard origin/master && sleep 1
  . "$bin_dir/loader"
}

update_python_packages() {
  echo "> Updating Python packages..." && sleep 1
  pip install -U pip
  pip install -U wheel
  pip install -U yt-dlp
  ## VidHop relies on Selenium for scraping channel avatars in scenario's where yt-dlp doesn't.
  ## The webdriver for Selenium is not installed and probably doesn't work on Termux, gonna let this one go.
  #  pip install -U requests
  #  pip install -U selenium
  #  pip install -U beautifulsoup4
  #  pip install -U image
  #  pip install -U pillow
  ## Social media scrapers only scrape text, no images, which makes it kinda useless.
  #  pip install -U facebook-scraper
  #  pip install -U snscrape
  ## This website scraper is inferior to 'Save Page As' functionality of a browser.
  #  pip install -U pywebcopy
}

remove_unused_python_packages() {
  pip uninstall --yes requests
  pip uninstall --yes selenium
  pip uninstall --yes beautifulsoup4
  pip uninstall --yes image
  pip uninstall --yes pillow
  pip uninstall --yes facebook-scraper
  pip uninstall --yes snscrape
  pip uninstall --yes pywebcopy
}

updateytdlp() {
  echo "> Updating YT-DLP..." && sleep 1
  pip install -U yt-dlp
  #  pipx upgrade yt-dlp
  #  yt-dlp -U
}

updatevidhop() {
  pwd=$(pwd) && cd "$vidhop_app_dir"
  fetch_github
  update_python_packages
  install_loader
  echo -e "\n${GREEN}VidHop updated ! ${NC}\n\nReload VidHop by choosing one of these two options:"
  echo -e "  1. Close Termux and reopen Termux.\n  2. Execute '. vidhop'"
  cd "$pwd"
}

uninstallvidhop() {
  echo "This is the uninstallation program for VidHop."
  echo "Uninstall removes all program files."
  echo "It does not delete your downloads in the VidHop directory."
  echo -n 'Are you sure you want to uninstall VidHop? y/N: ' && read -r answer
  answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
  [ "$answer" = "n" ] || [ -z "$answer" ] && echo "aborted uninstall" && return
  [ "$answer" = "y" ] &&
    sudo rm "/usr/local/bin/vidhop" &&
    rm -rf "/opt/vidhop" &&
    echo "VidHop software removed" && sleep 1
  unset answer

  echo 'WARNING: The following action will permanently delete your VidHop directory that contains all your downloaded media and metadata files.' && sleep 1
  echo -n 'Do you want to delete your VidHop directory? y/N: ' && read -r answer
  answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
  [ "$answer" = "n" ] || [ -z "$answer" ] && echo "uninstall stopped" && return
  [ "$answer" = "y" ] && rm -rf "$shared/VidHop" && echo "VidHop media and metadata directory deleted" && sleep 2
  echo "VidHop uninstall completed"
}

loader_help() {
  echo " Title: loader"
  echo " Description: VidHop management functions."
  echo " Commands:"
  echo "    updatevidhop    => default update"
  echo "    uninstallvidhop => remove all VidHop executables, downloaded data in the VidHop directory will NOT be deleted"
  echo "    installloader   => alias for install_loader"
  echo "    install_loader  => enables users to reload with '. vidhop"
  echo "    fetch_github    => download the newest VidHop code from GitHub"
  echo "    update_python_packages => updates Python packages with pip (package manager)"
}

vidhophelp() {
  dlv_help && echo
  fvid_help && echo
  files_help && echo
  image_help && echo
  metadata_help && echo
  history_help && echo
  sync_help && echo
  batch_help && echo
  loader_help && return
}
