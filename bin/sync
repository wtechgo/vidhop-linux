#!/bin/bash

# Sync VidHop data from phone to workstation using rsync and vice versa.
# These functions are intended to be used on the workstation.
#
# No permissions error was solved by disabling the firewall on computer.
# Don't forget to start sshd on the workstation.

function sync_help() {
  echo " Title: sync"
  echo " Description: Sync files between phone and workstation."
  echo " Commands:"
  echo "   syncvidhop  => fetch VidHop files from phone to workstation and send files from workstation to phone"
  echo "               => syncvidhop executes sendvidhop and fetchvidhop"
  echo "   sendvidhop  => send files from workstation to phone"
  echo "   fetchvidhop => fetch VidHop files from phone to workstation"
  echo " Prerequisites:"
  echo "   1. the IP-address and user have to be known in the 'sync' file, optionally via config.ini"
  echo "   2. passwordless public SSH keys should be configured on phone and workstation (or you'll have to type passwords)"
  echo "   3. start sshd on workstation and phone (Termux)"
  echo " Notes:"
  echo "   sendvidhop sends all VidHop files, keeps the metadata files and deletes media files to not clog up the phone"
  echo "   fetchvidhop fetches only metadata files to enable video searches in Termux via the fvid command"
  echo " Troubleshoot:"
  echo "   No permissions error was solved by disabling the firewall on the workstation."
}

# PHONE
IP_PHONE="FILL_IN_IP_ADDRESS_FROM_PHONE_IN_CONFIG.INI"
USER_PHONE="FILL_IN_USER_FROM_PHONE_IN_CONFIG.INI"
VIDHOP_DIR_PHONE="/data/data/com.termux/files/home/storage/shared/VidHop"
VIDHOP_APP_DIR_PHONE="/data/data/com.termux/files/usr/opt/vidhop"
[ -f "$config_ini" ] && . "$config_ini" # overwrite $USER_WS & $USER_HOME_WS
TERMUX_RC_PHONE="/data/data/com.termux/files/usr/etc/bash.bashrc"
SSH_PORT_TERMUX=8022

# WORKSTATION
USER_WS="FILL_IN_USER_FROM_WORKSTATION_IN_CONFIG.INI"
USER_HOME_WS="/home/$USER_WS"
[ -f "$config_ini" ] && . "$config_ini" # overwrite $VIDHOP_APP_DIR_WS and $VIDHOP_BIN_DIR_WS
VIDHOP_APP_DIR_WS="/opt/vidhop"
VIDHOP_DIR_WS="$USER_HOME_WS/Videos/VidHop"
DOWNLOADS_WS="$USER_HOME_WS/Downloads"
TERMUX_RC_WS="SET_IN_CONFIG_INI"
TOR_DOWNLOADS_WS="/home/$USER_WS/.local/share/torbrowser/tbb/x86_64/tor-browser_en-US/Browser/Downloads"
SSH_PRIVATE_KEY_WS="$HOME/.ssh/id_vidhop"
[ -f "$config_ini" ] && . "$config_ini"

function sshphone() {
  [ -n "$1" ] && local IP_PHONE="$1"
  ssh -4 -p 8022 -i "$SSH_PRIVATE_KEY_WS" "$USER_PHONE@$IP_PHONE"
}

# sendvidhop
function real_sendvidhop() {
  echo -e ">> SENDING METADATA (JSON files)..."
  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    --exclude=".git/" \
    --exclude=".gitignore" \
    --exclude=".idea/" \
    --exclude="bin/" \
    --exclude="log/" \
    --exclude="import/" \
    --exclude="export/" \
    --include="*/" \
    --include="*.json" \
    --exclude="*" \
    "$VIDHOP_DIR_WS/" "$USER_PHONE@$IP_PHONE:$VIDHOP_DIR_PHONE"
}

function dry_sendvidhop() {
  echo -e ">> SENDING METADATA (JSON files)..."
  rsync -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    --exclude=".git/" \
    --exclude=".gitignore" \
    --exclude=".idea/" \
    --exclude="bin/" \
    --exclude="log/" \
    --exclude="import/" \
    --exclude="export/" \
    --include="*/" \
    --include="*.json" \
    --exclude="*" \
    "$VIDHOP_DIR_WS/" "$USER_PHONE@$IP_PHONE:$VIDHOP_DIR_PHONE"
}

# sync media files
# ----------------
function sendvidhop() {
  unset answer
  if [ "$1" = "-exec" ]; then
    real_sendvidhop
  else
    dry_sendvidhop

    echo "---"
    echo "this was a dry run"
    echo "execute 'sendvidhop -exec' to do a real run?"
    echo -n "Do real run now? Y/n: " && read -r answer
    # Ask for real run and do it if yes.
    answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
    [ "$answer" = "n" ] && return
    [ "$answer" = "y" ] || [ -z "$answer" ] && sendvidhop -exec
  fi
}

# fetchvidhop
function real_fetchvidhop() {
  echo -e ">> FETCHING METADATA (JSON files)..."
  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    --include="*/" \
    --include="*.json" \
    --include="*.mp3" \
    --include="*.m4a" \
    --exclude="*" \
    "$USER_PHONE@$IP_PHONE:$VIDHOP_DIR_PHONE/metadata/" "$VIDHOP_DIR_WS/metadata"

  echo -e "\n" && echo ">> FETCHING MEDIA files and delete from phone..."
  rsync -Pauv --remove-source-files -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    --exclude=".git/" \
    --exclude=".gitignore" \
    --exclude="metadata/.nomedia" \
    --exclude="bin/" \
    --exclude="log/" \
    --exclude="import/" \
    --exclude="export/" \
    --include="*/" \
    --include="*.jpg" \
    --include="*.jpeg" \
    --include="*.png" \
    --include="*.webp" \
    --exclude="*.json" \
    --include="*.mp4" \
    --include="*.webm" \
    "$USER_PHONE@$IP_PHONE:$VIDHOP_DIR_PHONE/" "$VIDHOP_DIR_WS"
}

function dry_fetchvidhop() {
  echo -e ">> FETCHING METADATA (JSON files)..."
  rsync -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    --include="*/" \
    --include="*.json" \
    --include="*.mp3" \
    --include="*.m4a" \
    --exclude="*" \
    "$USER_PHONE@$IP_PHONE:$VIDHOP_DIR_PHONE/metadata/" "$VIDHOP_DIR_WS/metadata"

  echo -e "\n" && echo ">> FETCHING MEDIA files and delete from phone..."
  rsync -Pauvn --remove-source-files -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    --exclude=".git/" \
    --exclude=".gitignore" \
    --exclude="metadata/.nomedia" \
    --exclude="bin/" \
    --exclude="log/" \
    --exclude="import/" \
    --exclude="export/" \
    --include="*/" \
    --include="*.jpg" \
    --include="*.jpeg" \
    --include="*.png" \
    --include="*.webp" \
    --exclude="*.json" \
    --include="*.mp4" \
    --include="*.webm" \
    "$USER_PHONE@$IP_PHONE:$VIDHOP_DIR_PHONE/" "$VIDHOP_DIR_WS"
}

# Termux doesn't support creating files with names containing colons, backslash and who knows what else.
# For files with such names, rsync will not work.
function fetchvidhop() {
  unset answer
  if [ "$1" = "-exec" ]; then
    real_fetchvidhop
  else
    dry_fetchvidhop

    echo "---"
    echo "this was a dry run"
    echo "execute 'fetchvidhop -exec' to do a real run?"
    echo -n "Do real run now? Y/n: " && read -r answer
    answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
    [ "$answer" = "n" ] && return
    [ "$answer" = "y" ] || [ -z "$answer" ] && fetchvidhop -exec
  fi
}

function syncvidhop() {
  unset answer
  echo -n "Do real run (y) or dry run (n) or abort (a)? Y/n: " && read -r answer
  answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')

  [ "$answer" = "a" ] && return
  [ "$answer" = "n" ] &&
    echo -e "\n> FETCHING vidhop files DRY RUN..." && dry_fetchvidhop &&
    echo -e "\n> SENDING vidhop files DRY RUN..." && dry_sendvidhop &&
    syncvidhop && return
  [ "$answer" = "y" ] &&
    echo -e "\n> FETCHING vidhop files..." && fetchvidhop -exec &&
    echo -e "\n> SENDING vidhop files..." && sendvidhop -exec
}

function sendvidhopbin() {
  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    --exclude=".git/" \
    --exclude=".gitignore" \
    --exclude=".idea/" \
    --exclude="bash.bashrc" \
    "$VIDHOP_DEV_DIR_WS/"* "$USER_PHONE@$IP_PHONE:$VIDHOP_APP_DIR_PHONE"
}

function fetchvidhopbin() {
  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    --exclude=".git/" \
    --exclude=".gitignore" \
    --exclude=".idea/" \
    "$USER_PHONE@$IP_PHONE:$VIDHOP_APP_DIR_PHONE"/* "$VIDHOP_DEV_DIR_WS"
}

# sync downloaded files
# ---------------------
shared="/data/data/com.termux/files/home/storage/shared"
# img media directories
dl="$shared/Download"
docs="$shared/Documents"
pictures="$shared/Pictures"
screenshots="$pictures/Screenshots"
fb1="$pictures/Facebook"
messenger="$pictures/Messenger"
twitter="$pictures/Twitter"
fb2="$shared/DCIM/Facebook"
# mov media directories
youcut="$shared/Movies/youcut"
screen_rec="$shared/Movies/Screen Recorder"

# file extensions
doc_exts=(doc docx xls xlsx pdf txt md)
img_exts=(jpg png webp jpeg)
audio_exts=(mp3 m4a wav flacc aac)
mov_exts=(mp4 webm mkv mov avi)

function real_fetchdownloads() {
  for ext in "${audio_exts[@]}"; do
    rsync --remove-source-files -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$dl/" "$USER_HOME_WS/Music"
  done

  for ext in "${doc_exts[@]}"; do
    rsync --remove-source-files -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$dl/" "$USER_HOME_WS/Documents"
    rsync --remove-source-files -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$docs/" "$USER_HOME_WS/Documents"
  done

  for ext in "${img_exts[@]}"; do
    rsync --remove-source-files -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$dl/" "$USER_HOME_WS/Pictures"
    rsync --remove-source-files -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$screenshots/" "$USER_HOME_WS/Pictures"
    rsync --remove-source-files -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$fb2/" "$USER_HOME_WS/Pictures"
    rsync --remove-source-files -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$fb1/" "$USER_HOME_WS/Pictures"
    rsync --remove-source-files -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$messenger/" "$USER_HOME_WS/Pictures"
    rsync --remove-source-files -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$twitter/" "$USER_HOME_WS/Pictures"
  done

  for ext in "${mov_exts[@]}"; do
    rsync --remove-source-files -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$dl/" "$USER_HOME_WS/Videos"
    rsync --remove-source-files -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$youcut/" "$USER_HOME_WS/Videos"
    rsync --remove-source-files -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$screen_rec/" "$USER_HOME_WS/Videos"
  done
}

function dry_fetchdownloads() {
  for ext in "${audio_exts[@]}"; do
    rsync --remove-source-files -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$dl/" "$USER_HOME_WS/Music"
  done

  for ext in "${doc_exts[@]}"; do
    rsync --remove-source-files -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$dl/" "$USER_HOME_WS/Documents"
    rsync --remove-source-files -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$docs/" "$USER_HOME_WS/Documents"
  done

  for ext in "${img_exts[@]}"; do
    rsync --remove-source-files -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$dl/" "$USER_HOME_WS/Pictures"
    rsync --remove-source-files -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$screenshots/" "$USER_HOME_WS/Pictures"
    rsync --remove-source-files -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$fb2/" "$USER_HOME_WS/Pictures"
    rsync --remove-source-files -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$fb1/" "$USER_HOME_WS/Pictures"
    rsync --remove-source-files -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$messenger/" "$USER_HOME_WS/Pictures"
    rsync --remove-source-files -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$twitter/" "$USER_HOME_WS/Pictures"
  done

  for ext in "${mov_exts[@]}"; do
    rsync --remove-source-files -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$dl/" "$USER_HOME_WS/Videos"
    rsync --remove-source-files -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$youcut/" "$USER_HOME_WS/Videos"
    rsync --remove-source-files -Pauvn -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
      --include="*.$ext" --exclude="*" "$USER_PHONE@$IP_PHONE:$screen_rec/" "$USER_HOME_WS/Videos"
  done
}

function fetchdownloads() {
  if [ "$1" = "-dry" ] || [ "$1" = "-d" ]; then
    dry_fetchdownloads
    echo "---"
    echo "this was a dry run"
    echo "execute 'senddownloads -exec' to do a real run"
    unset answer && echo -n "Do real run now? Y/n: " && read -r answer
    answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
    [ "$answer" = "n" ] && return
    [ "$answer" = "y" ] || [ -z "$answer" ] && fetchdownloads -exec && return
    echo "unknown answer '$answer', abort"
  else # dry run, files identical to previous block
    real_fetchdownloads
  fi
}

function sshconfig() {
  echo "User on this phone      : $(whoami)"
  echo "IP-address of this phone: $(ifdata -pa wlan0)"
}

# rsync music to USB or phone
src_music_dir="/home/freetalk/Music/Portable"
usb_music_dir="/run/media/$USER_WS/USB_STICK"
phone_music_dir="$shared/Music"

function sendmusictousb() {
  echo "syncing music from workstation to usb with rsync..."
  echo "from: $src_music_dir"
  echo "  to: $usb_music_dir"
  echo "==================================================="

  if [ -d "$usb_music_dir" ]; then
    find "$src_music_dir" -exec id3convert --strip {} \; # strip all id-tags as some choke the car radio
    rsync -avh "$src_music_dir/" "$usb_music_dir" --delete
    echo "removing .Trash-1000 from usb..."
    rm -rf "$usb_music_dir/.Trash-1000"
  else
    echo "usb not found at $usb_music_dir"
  fi
}

function sendmusictophone() {
  echo "syncing music from workstation to phone with rsync..."
  echo "from: $src_music_dir"
  echo "  to: $phone_music_dir"
  echo "====================================================="

  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    "$src_music_dir" "$USER_PHONE@$IP_PHONE:$phone_music_dir"
}

# Move downloaded files from ~/Downloads to ~/Documents, ~/Videos, ~/Music, ~/Pictures.
function mvmedia() {
  img=(jpg png webp jpeg psd)
  vid=(mp4 mkv mov avi webm)
  audio=(mp3 m4a wav flacc aac m4a)
  doc=(doc docx xls lsx pdf txt md epub)
  keepdoc=(notes law finance offgrid videos)

  [ "$SHELL" = "/bin/zsh" ] && setopt +o nomatch # disable zsh msg "no matches found *.jpg..."

  # Copy Tor DOWNLOADS_WS to normal DOWNLOADS_WS directory.
  mv "$TOR_DOWNLOADS_WS/"* "$DOWNLOADS_WS" 2>/dev/null

  for ext in "${img[@]}"; do
    mv "$DOWNLOADS_WS/"*".$ext" "$USER_HOME_WS/Pictures" 2>/dev/null
  done

  for ext in "${vid[@]}"; do
    mv "$DOWNLOADS_WS/"*".$ext" "$USER_HOME_WS/Videos" 2>/dev/null
  done

  for ext in "${audio[@]}"; do
    mv "$DOWNLOADS_WS/"*".$ext" "$USER_HOME_WS/Music" 2>/dev/null
  done

  for ext in "${doc[@]}"; do
    mv "$DOWNLOADS_WS/"*".$ext" "$USER_HOME_WS/Documents" 2>/dev/null
  done

  [ "$SHELL" = "/bin/zsh" ] && setopt -o nomatch
}

function create-backup-vidhop() {
  [ "$1" = -h ] || [ "$1" = --help ] &&
    echo "usage: create-backup-vidhop" &&
    echo " info: copy files from \$vidhop_dir to \$vidhop_backup_dir (ideally set in config.ini)" &&
    echo &&
    echo "usage: create-backup-vidhop <VIDHOP_BACKUP_DIR>" &&
    echo " info: copy files from \$vidhop_dir to \$vidhop_backup_dir (ideally set in config.ini)" &&
    echo && return
  [ -n "$1" ] && vidhop_backup_dir="$1"
  rsync -av "$vidhop_dir"/* "$vidhop_backup_dir" --exclude=".git/" --exclude=".idea"
}

function restore-backup-vidhop() {
  [ "$1" = -h ] || [ "$1" = --help ] &&
    echo "usage: restore-backup-vidhop" &&
    echo " info: copy files from \$vidhop_backup_dir to \$vidhop_dir (ideally set in config.ini)" &&
    echo &&
    echo "usage: restore-backup-vidhop <VIDHOP_BACKUP_DIR>" &&
    echo " info: copy files from \$vidhop_backup_dir to \$vidhop_dir (ideally set in config.ini)" &&
    echo && return
  [ -n "$1" ] && vidhop_backup_dir="$1"
  rsync -av "$vidhop_backup_dir"/* "$vidhop_dir" --exclude=".git/" --exclude=".idea"
}


function sendbashrc() {
  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    "$TERMUX_RC_WS" "$USER_PHONE@$IP_PHONE:$TERMUX_RC_PHONE"
}

function fetchbashrc() {
  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    "$USER_PHONE@$IP_PHONE:$TERMUX_RC_PHONE" "$TERMUX_RC_WS"
}

function sendfile() {
  [ -z "$1" ] && echo "usage: sendfile <SRC_FILE> <DEST_FILE> [<DEST_DIR>]" && return
  ! [ -f "$1" ] && echo "$1 is not a file" && return
  file_ws="$1"
  shared="/data/data/com.termux/files/home/storage/shared"
  [ -z "$2" ] && file_phone="$shared/Download/$(basename "$file_ws")" || file_phone="$shared/$2"
  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    "$file_ws" "$USER_PHONE@$IP_PHONE:$file_phone"
}

function fetchfile() {
  [ -z "$1" ] && echo "usage: fetchfile <SRC_FILE> <DEST_FILE>" && return
  ! [ -f "$1" ] && echo "$1 is not a file" && return
  shared="/data/data/com.termux/files/home/storage/shared"
  file_phone="$shared/$1"
  [ -z "$2" ] && file_ws="$USER_HOME_WS/Downloads/$(basename "$file_phone")" || file_ws="$2"
  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    "$USER_PHONE@$IP_PHONE:$file_phone" "$file_ws"
}

function sendfileabs() {
  file_ws="$1"
  file_phone="$2"
  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    "$file_ws" "$USER_PHONE@$IP_PHONE:$file_phone"
}

function fetchfileabs() {
  file_phone="$1"
  file_ws="$2"
  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    "$USER_PHONE@$IP_PHONE:$file_phone" "$file_ws"
}

function senddir() {
  dir_ws="$1"
  dir_phone="$2"
  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    "$dir_ws" "$USER_PHONE@$IP_PHONE:$dir_phone"
}

function fetchdir() {
  [ -z "$1" ] &&
    echo "usage: fetchdir <PHONE_DIR_ABS_PATH> <WS_DIR_ABS_PATH>" &&
    echo "       fetchdir <PHONE_DIR_ABS_PATH>" &&
    echo "       => Empty second argument puts the fetched dir in the current dir." && return

  dir_phone="$1"
  [ -z "$2" ] && dir_ws="$PWD" || dir_ws="$2"

  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    "$USER_PHONE@$IP_PHONE:$dir_phone" "$dir_ws"
}

function fetchdir-sdcard() {
  [ -z "$1" ] &&
    echo "usage: fetchdir-sdcard <PHONE_DIR_RELATIVE_SHARED_STORAGE> <WS_DIR_ABS_PATH>" &&
    echo "       fetchdir-sdcard <PHONE_DIR_RELATIVE_SHARED_STORAGE>" &&
    echo "       => Empty second argument puts the fetched directory in $import_dir." && return

  dir_phone="$shared/$1"
  [ -z "$2" ] && dir_ws="$import_dir" || dir_ws="$2"

  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    "$USER_PHONE@$IP_PHONE:$dir_phone" "$dir_ws"
}

function fetch-usb-microphone-recordings() {
  phone_usb_microscope_dir="$shared/DCIM/USBCamera/Videos"
  ws_usb_microscope_dir="$record_dir/usb microscope/Videos"
  mkdir -p "$ws_usb_microscope_dir" 2>/dev/null

  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    "$USER_PHONE@$IP_PHONE:$phone_usb_microscope_dir" "$ws_usb_microscope_dir"
}

function fetch-screen-recordings() {
  phone_dir="$shared/Movies/Screen Recorder"
  ws_dir="$record_dir/phone"
  mkdir -p "$ws_dir" 2>/dev/null

  rsync -Pauv -e "ssh -p $SSH_PORT_TERMUX -i $SSH_PRIVATE_KEY_WS" \
    "$USER_PHONE@$IP_PHONE:$phone_dir/" "$ws_dir"
}
